{"ast":null,"code":"var _jsxFileName = \"/home/edopeppe2/\\xC1rea de Trabalho/sipleAI/src/components/Typewriter.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatText = text => {\n  // Substitui **texto** por texto em negrito\n  let formatted = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n\n  // Substitui *texto* por texto em itálico\n  formatted = formatted.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n\n  // Substitui # Título por título formatado\n  formatted = formatted.replace(/^# (.*$)/gm, '<h1 class=\"text-2xl font-bold mb-4\">$1</h1>');\n  formatted = formatted.replace(/^## (.*$)/gm, '<h2 class=\"text-xl font-bold mb-3\">$1</h2>');\n  formatted = formatted.replace(/^### (.*$)/gm, '<h3 class=\"text-lg font-bold mb-2\">$1</h3>');\n\n  // Substitui quebras de linha por <br>\n  formatted = formatted.replace(/\\n/g, '<br>');\n\n  // Adiciona espaçamento entre parágrafos\n  formatted = formatted.replace(/<br><br>/g, '</p><p>');\n  return `<p>${formatted}</p>`;\n};\nconst Typewriter = ({\n  text,\n  speed = 30,\n  onComplete\n}) => {\n  _s();\n  const [displayedText, setDisplayedText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isTyping, setIsTyping] = useState(true);\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayedText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n      return () => clearTimeout(timeout);\n    } else {\n      setIsTyping(false);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [currentIndex, text, speed, onComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prose prose-invert prose-sm max-w-none\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `typewriter-text ${isTyping ? 'typing' : ''}`,\n      dangerouslySetInnerHTML: {\n        __html: formatText(displayedText)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), isTyping && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"typing-cursor\",\n      children: \"|\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Typewriter, \"ssUJrOMKI+D0CXPlwV+jeAgu26s=\");\n_c = Typewriter;\nexport default Typewriter;\nvar _c;\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","formatText","text","formatted","replace","Typewriter","speed","onComplete","_s","displayedText","setDisplayedText","currentIndex","setCurrentIndex","isTyping","setIsTyping","length","timeout","setTimeout","prev","clearTimeout","className","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/edopeppe2/Área de Trabalho/sipleAI/src/components/Typewriter.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface TypewriterProps {\n  text: string;\n  speed?: number;\n  onComplete?: () => void;\n}\n\nconst formatText = (text: string) => {\n  // Substitui **texto** por texto em negrito\n  let formatted = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n  \n  // Substitui *texto* por texto em itálico\n  formatted = formatted.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n  \n  // Substitui # Título por título formatado\n  formatted = formatted.replace(/^# (.*$)/gm, '<h1 class=\"text-2xl font-bold mb-4\">$1</h1>');\n  formatted = formatted.replace(/^## (.*$)/gm, '<h2 class=\"text-xl font-bold mb-3\">$1</h2>');\n  formatted = formatted.replace(/^### (.*$)/gm, '<h3 class=\"text-lg font-bold mb-2\">$1</h3>');\n  \n  // Substitui quebras de linha por <br>\n  formatted = formatted.replace(/\\n/g, '<br>');\n  \n  // Adiciona espaçamento entre parágrafos\n  formatted = formatted.replace(/<br><br>/g, '</p><p>');\n  \n  return `<p>${formatted}</p>`;\n};\n\nconst Typewriter: React.FC<TypewriterProps> = ({ text, speed = 30, onComplete }) => {\n  const [displayedText, setDisplayedText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isTyping, setIsTyping] = useState(true);\n\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayedText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n\n      return () => clearTimeout(timeout);\n    } else {\n      setIsTyping(false);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [currentIndex, text, speed, onComplete]);\n\n  return (\n    <div className=\"prose prose-invert prose-sm max-w-none\">\n      <div \n        className={`typewriter-text ${isTyping ? 'typing' : ''}`}\n        dangerouslySetInnerHTML={{ __html: formatText(displayedText) }}\n      />\n      {isTyping && <span className=\"typing-cursor\">|</span>}\n    </div>\n  );\n};\n\nexport default Typewriter; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQnD,MAAMC,UAAU,GAAIC,IAAY,IAAK;EACnC;EACA,IAAIC,SAAS,GAAGD,IAAI,CAACE,OAAO,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;;EAErE;EACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,YAAY,EAAE,aAAa,CAAC;;EAE1D;EACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,YAAY,EAAE,6CAA6C,CAAC;EAC1FD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,aAAa,EAAE,4CAA4C,CAAC;EAC1FD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,cAAc,EAAE,4CAA4C,CAAC;;EAE3F;EACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;;EAE5C;EACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC;EAErD,OAAO,MAAMD,SAAS,MAAM;AAC9B,CAAC;AAED,MAAME,UAAqC,GAAGA,CAAC;EAAEH,IAAI;EAAEI,KAAK,GAAG,EAAE;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAClF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,IAAIa,YAAY,GAAGT,IAAI,CAACa,MAAM,EAAE;MAC9B,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/BP,gBAAgB,CAACQ,IAAI,IAAIA,IAAI,GAAGhB,IAAI,CAACS,YAAY,CAAC,CAAC;QACnDC,eAAe,CAACM,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MACnC,CAAC,EAAEZ,KAAK,CAAC;MAET,OAAO,MAAMa,YAAY,CAACH,OAAO,CAAC;IACpC,CAAC,MAAM;MACLF,WAAW,CAAC,KAAK,CAAC;MAClB,IAAIP,UAAU,EAAE;QACdA,UAAU,CAAC,CAAC;MACd;IACF;EACF,CAAC,EAAE,CAACI,YAAY,EAAET,IAAI,EAAEI,KAAK,EAAEC,UAAU,CAAC,CAAC;EAE3C,oBACEP,OAAA;IAAKoB,SAAS,EAAC,wCAAwC;IAAAC,QAAA,gBACrDrB,OAAA;MACEoB,SAAS,EAAE,mBAAmBP,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;MACzDS,uBAAuB,EAAE;QAAEC,MAAM,EAAEtB,UAAU,CAACQ,aAAa;MAAE;IAAE;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,EACDd,QAAQ,iBAAIb,OAAA;MAAMoB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAACnB,EAAA,CA9BIH,UAAqC;AAAAuB,EAAA,GAArCvB,UAAqC;AAgC3C,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}